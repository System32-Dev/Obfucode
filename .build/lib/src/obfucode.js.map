{
  "version": 3,
  "sources": ["../../../lib/src/obfucode.ts"],
  "sourcesContent": ["import { parse, parseScript } from 'meriyah';\nimport { generate } from 'esotope-hammerhead';\nimport { randomBytes } from \"node:crypto\";\n\nclass Obfucode {\n\t// @ts-ignore\n\t__funcRep: any = {};\n\t// @ts-ignore\n\t__varsRep: any = {};\n\t// @ts-ignore\n\t__config: any = { platform: \"node\" };\n\t// @ts-ignore\n\t__hex: any = randomBytes(8).toString(\"hex\");\n\n\tget __tempConfig() {\n\t\treturn {\n\t\t\tdecoderHex: \"__\" + this.__hex\n\t\t}\n\t}\n\n\tget __inject() {\n\t\treturn `const ${this.__tempConfig.decoderHex}=((encoded) => { return encoded.split(/\\u3164/g).map((_item) => { return _item == \"\" ? _item : String.fromCharCode(_item) }).join(\"\") });`;\n\t}\n\n\tget __functions() {\n\t\treturn this.__funcRep;\n\t}\n\tset __functions(val) {\n\t\tthis.__funcRep = val;\n\t}\n\tget __variables() {\n\t\treturn this.__varsRep;\n\t}\n\tset __variables(val) {\n\t\tthis.__varsRep = val;\n\t}\n\tget _config() {\n\t\treturn this.__config;\n\t}\n\tset _config(val: any) {\n\t\tthis.__config = val;\n\t}\n\tget __parentObject() {\n\t\treturn ((this._config.platform || \"node\") == \"browser\") ? \"this\" : \"global\";\n\t}\n\n\t__textData(target: string, prefix = \"\") {\n\t\tvar code: Array<string> = [];\n\t\ttarget.split(\"\").forEach((_char: any) => {\n\t\t\tcode.push(prefix + _char.codePointAt(0).toString(16));\n\t\t})\n\t\treturn code;\n\t}\n\n\tconstructor(config: any = {}) {\n\t\tthis._config = config;\n\t}\n\n\tstringHandler(str: string) {\n\t\tvar result = \"\";\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tresult += \"\\u3164\" + str[i].charCodeAt(0);\n\t\t}\n\t\treturn parseScript(`${this.__tempConfig.decoderHex}(\"${result}\")`).body[0].expression;\n\t}\n\n\thexGen(size: number = 7) {\n\t\treturn [...Array(size)].map((_c) => \"abcdefghijklmnopqrstuvwxyz\"[Math.round(Math.random() * 25)][Math.round(Math.random() * 2) == 1 ? \"toUpperCase\" : \"toLowerCase\"]()).join(\"\")\n\t}\n\n\tcomponentConversion(node: any) {\n\t\tconst type = node.type;\n\t\tif (type == \"Literal\") node = this.stringHandler(node.value);\n\t\tif (type == \"Identifier\") {\n\t\t\tif (typeof this.__variables[node.name] === \"undefined\") {\n\t\t\t\tvar _id = btoa(node.name);\n\t\t\t\tthis.__variables[node.name] = {\n\t\t\t\t\tname: _id,\n\t\t\t\t}\n\t\t\t\t// @ts-ignore\n\t\t\t\tnode = parseScript(`${this.__parentObject}[atob(\"${_id}\")]`).body[0].expression;\n\t\t\t} else {\n\t\t\t\tnode.name = this.__variables[node.name].name;\n\t\t\t}\n\t\t}\n\t\tif (type == \"Property\") {\n\t\t\tnode.key.name = btoa(node.key.name);\n\t\t\tnode.value = this.componentConversion(node.value);\n\t\t}\n\t\tif (type == \"BlockStatement\") node.body.forEach((_block: any) => _block = this.componentConversion(_block));\n\t\tif (type == \"ExpressionStatement\") node.expression = this.componentConversion(node.expression);\n\t\tif (type == \"CallExpression\") {\n\t\t\tif (this.__functions[node.callee.name]) node.callee.name = this.__functions[node.callee.name];\n\t\t\telse node.callee = this.componentConversion(node.callee);\n\t\t\tlet _i = 0;\n\t\t\tnode.arguments.forEach((arg: any) => {\n\t\t\t\tnode.arguments[_i] = this.componentConversion(arg);\n\t\t\t\t_i++;\n\t\t\t})\n\t\t}\n\t\tif (type == \"NewExpression\") {\n\t\t\t// @ts-ignore\n\t\t\tnode.callee = parseScript(`${this.__parentObject}[atob(\"${btoa(node.callee.name)}\")]`).body[0].expression;\n\t\t\tvar _i = 0;\n\t\t\tnode.arguments.forEach((arg: any) => {\n\t\t\t\tnode.arguments[_i] = this.componentConversion(arg);\n\t\t\t\t_i++;\n\t\t\t})\n\t\t}\n\t\tif (type == \"MemberExpression\") {\n\t\t\tif (this.__variables[node.object.name]) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tnode = parseScript(`${this.__variables[node.object.name].name}[\"${btoa(node.property.name)}\"]`).body[0].expression;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// @ts-ignore\n\t\t\t\tnode = parseScript(`${this.__parentObject}[atob(\"${btoa(node.object.name)}\")][atob(\"${btoa(node.property.name)}\")]`).body[0].expression;\n\t\t\t}\n\t\t}\n\t\tif (type == \"BinaryExpression\") {\n\t\t\tnode.left = this.componentConversion(node.left);\n\t\t\tnode.right = this.componentConversion(node.right);\n\t\t}\n\t\tif (type == \"FunctionDeclaration\" || type == \"ArrowFunctionExpression\") {\n\t\t\tif (type == \"FunctionDeclaration\") {\n\t\t\t\tvar _id = this.hexGen();\n\t\t\t\tthis.__functions[node.id.name] = _id;\n\t\t\t\tnode.id.name = _id;\n\t\t\t}\n\t\t\tnode.body = this.componentConversion(node.body);\n\t\t}\n\t\tif (type == \"VariableDeclaration\") node.declarations.forEach((_declarator: any) => _declarator = this.componentConversion(_declarator));\n\t\tif (type == \"VariableDeclarator\") {\n\t\t\tthis.__variables[node.id.name] = {\n\t\t\t\tname: btoa(node.id.name).replaceAll(/=/g, \"\"),\n\t\t\t}\n\t\t\tnode.id.name = this.__variables[node.id.name].name;\n\t\t\tvar _props = this.componentConversion(node.init);\n\t\t\tif (node.init.type == \"ObjectExpression\") this.__variables.prop = _props;\n\t\t\tnode.init = _props;\n\t\t}\n\t\tif (type == \"IfStatement\") {\n\t\t\tif (node.alternate) node.alternate = this.componentConversion(node.alternate);\n\t\t\tnode.consequent = this.componentConversion(node.consequent);\n\t\t\tnode.test = this.componentConversion(node.test);\n\t\t}\n\t\tif (type == \"AwaitExpression\") {\n\t\t\tnode.argument = this.componentConversion(node.argument);\n\t\t}\n\t\tif (type == \"ObjectExpression\") {\n\t\t\tnode.properties.forEach((prop: any) => {\n\t\t\t\tprop = this.componentConversion(prop);\n\t\t\t})\n\t\t}\n\t\tif (type == \"ReturnStatement\") node.argument = this.componentConversion(node.argument);\n\t\treturn node;\n\t}\n\n\tobfuscate(source: string) {\n\t\t/**\n\t\t\t\t* Obfuscates the source string\n\t\t\t\t* @param {string} source\n\t\t\t\t* @return {string}\n\t\t\t\t* Obfucode.obfuscate(\"console.log('Foo');\");\n\t\t\t\t*/\n\t\tthis.__functions = {};\n\t\tconst _parsed = parseScript(source);\n\t\tvar _SCRIPT = this.__inject;\n\t\t_parsed.body.forEach((component: any) => {\n\t\t\t_SCRIPT += generate({\n\t\t\t\ttype: \"Program\",\n\t\t\t\tsourceType: \"script\",\n\t\t\t\tbody: [this.componentConversion(component)],\n\t\t\t});\n\t\t})\n\t\treturn _SCRIPT;\n\t}\n}\n\nexport {\n\tObfucode,\n}"],
  "mappings": "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",
  "names": []
}
