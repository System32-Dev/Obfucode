{
  "version": 3,
  "sources": ["../../lib/cli.ts"],
  "sourcesContent": ["import * as yargs from 'yargs';\nimport { resolve } from 'path';\nimport { writeFileSync, readFileSync } from 'fs';\nimport { Obfucode } from './src/obfucode';\nexport default function __cli() {\n\tlet args = yargs\n\t\t.option('platform', {\n\t\t\talias: 'p',\n\t\t\tdescription: \"Set the obfuscated script target platform.\",\n\t\t\tdemand: false\n\t\t})\n\t\t.option('output', {\n\t\t\talias: 'o',\n\t\t\tdescription: \"Write to an output file.\",\n\t\t\tdemand: false\n\t\t})\n\t\t.option('file', {\n\t\t\talias: 'f',\n\t\t\tdescription: \"Obfuscate a file.\",\n\t\t\tdemand: false\n\t\t}).argv;\n\n\tif (args.file) {\n\t\tvar platform = (args.platform || \"node\");\n\t\ttry {\n\t\t\tvar _file = readFileSync(resolve(args.file), \"utf-8\");\n\t\t\tvar obfuscator = new Obfucode({\n\t\t\t\tplatform: platform\n\t\t\t})\n\t\t\tvar result = obfuscator.obfuscate(_file);\n\t\t\tif (args.output) {\n\t\t\t\twriteFileSync(resolve(args.output), result);\n\t\t\t} else {\n\t\t\t\tconsole.log(result);\n\t\t\t}\n\t\t} catch (e:any) {\n\t\t\tconsole.log(e.message);\n\t\t}\n\t}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,YAAuB;AACvB,kBAAwB;AACxB,gBAA4C;AAC5C,sBAAyB;AACV,iBAAiB;AAC/B,MAAI,OAAO,MACT,OAAO,YAAY;AAAA,IACnB,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,KAER,OAAO,UAAU;AAAA,IACjB,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,KAER,OAAO,QAAQ;AAAA,IACf,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,KACN;AAEJ,MAAI,KAAK,MAAM;AACd,QAAI,WAAY,KAAK,YAAY;AACjC,QAAI;AACH,UAAI,QAAQ,4BAAa,yBAAQ,KAAK,OAAO;AAC7C,UAAI,aAAa,IAAI,yBAAS;AAAA,QAC7B;AAAA;AAED,UAAI,SAAS,WAAW,UAAU;AAClC,UAAI,KAAK,QAAQ;AAChB,qCAAc,yBAAQ,KAAK,SAAS;AAAA,aAC9B;AACN,gBAAQ,IAAI;AAAA;AAAA,aAEL,GAAP;AACD,cAAQ,IAAI,EAAE;AAAA;AAAA;AAAA;",
  "names": []
}
